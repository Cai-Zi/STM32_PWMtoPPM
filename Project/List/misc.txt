; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\misc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\misc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User -I..\BaseDrive -I.\RTE\_TimeCounter -Id:\Keil_v5\MDK\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -Id:\Keil_v5\MDK\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\misc.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;95       */
;;;96     void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4931              LDR      r1,|L1.200|
;;;97     {
;;;98       /* Check the parameters */
;;;99       assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;100      
;;;101      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;102      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4301              ORRS     r1,r1,r0
000004  4a31              LDR      r2,|L1.204|
000006  6011              STR      r1,[r2,#0]
;;;103    }
000008  4770              BX       lr
;;;104    
                          ENDP

                  NVIC_Init PROC
;;;111      */
;;;112    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000a  b570              PUSH     {r4-r6,lr}
;;;113    {
;;;114      uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
00000c  2100              MOVS     r1,#0
00000e  2300              MOVS     r3,#0
000010  220f              MOVS     r2,#0xf
;;;115      
;;;116      /* Check the parameters */
;;;117      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;118      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;119      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;120        
;;;121      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000012  78c4              LDRB     r4,[r0,#3]
000014  b304              CBZ      r4,|L1.88|
;;;122      {
;;;123        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;124        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
000016  4c2d              LDR      r4,|L1.204|
000018  6824              LDR      r4,[r4,#0]
00001a  f40464e0          AND      r4,r4,#0x700
00001e  f5c464e0          RSB      r4,r4,#0x700
000022  0a21              LSRS     r1,r4,#8
;;;125        tmppre = (0x4 - tmppriority);
000024  f1c10304          RSB      r3,r1,#4
;;;126        tmpsub = tmpsub >> tmppriority;
000028  40ca              LSRS     r2,r2,r1
;;;127    
;;;128        tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
00002a  7844              LDRB     r4,[r0,#1]
00002c  fa04f103          LSL      r1,r4,r3
;;;129        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
000030  7884              LDRB     r4,[r0,#2]
000032  4014              ANDS     r4,r4,r2
000034  4321              ORRS     r1,r1,r4
;;;130        tmppriority = tmppriority << 0x04;
000036  0109              LSLS     r1,r1,#4
;;;131            
;;;132        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000038  4c25              LDR      r4,|L1.208|
00003a  7806              LDRB     r6,[r0,#0]
00003c  55a1              STRB     r1,[r4,r6]
;;;133        
;;;134        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;135        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00003e  7804              LDRB     r4,[r0,#0]
000040  f004051f          AND      r5,r4,#0x1f
000044  2401              MOVS     r4,#1
000046  40ac              LSLS     r4,r4,r5
000048  7805              LDRB     r5,[r0,#0]
00004a  116d              ASRS     r5,r5,#5
00004c  00ad              LSLS     r5,r5,#2
00004e  f10525e0          ADD      r5,r5,#0xe000e000
000052  f8c54100          STR      r4,[r5,#0x100]
000056  e009              B        |L1.108|
                  |L1.88|
;;;136          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;137      }
;;;138      else
;;;139      {
;;;140        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;141        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000058  7804              LDRB     r4,[r0,#0]
00005a  f004051f          AND      r5,r4,#0x1f
00005e  2401              MOVS     r4,#1
000060  40ac              LSLS     r4,r4,r5
000062  4d1c              LDR      r5,|L1.212|
000064  7806              LDRB     r6,[r0,#0]
000066  1176              ASRS     r6,r6,#5
000068  f8454026          STR      r4,[r5,r6,LSL #2]
                  |L1.108|
;;;142          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;143      }
;;;144    }
00006c  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;155      */
;;;156    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
00006e  4a1a              LDR      r2,|L1.216|
;;;157    { 
;;;158      /* Check the parameters */
;;;159      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;160      assert_param(IS_NVIC_OFFSET(Offset));  
;;;161       
;;;162      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000070  400a              ANDS     r2,r2,r1
000072  4302              ORRS     r2,r2,r0
000074  4b15              LDR      r3,|L1.204|
000076  1f1b              SUBS     r3,r3,#4
000078  601a              STR      r2,[r3,#0]
;;;163    }
00007a  4770              BX       lr
;;;164    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;174      */
;;;175    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
00007c  b139              CBZ      r1,|L1.142|
;;;176    {
;;;177      /* Check the parameters */
;;;178      assert_param(IS_NVIC_LP(LowPowerMode));
;;;179      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;180      
;;;181      if (NewState != DISABLE)
;;;182      {
;;;183        SCB->SCR |= LowPowerMode;
00007e  4a13              LDR      r2,|L1.204|
000080  1d12              ADDS     r2,r2,#4
000082  6812              LDR      r2,[r2,#0]
000084  4302              ORRS     r2,r2,r0
000086  4b11              LDR      r3,|L1.204|
000088  1d1b              ADDS     r3,r3,#4
00008a  601a              STR      r2,[r3,#0]
00008c  e006              B        |L1.156|
                  |L1.142|
;;;184      }
;;;185      else
;;;186      {
;;;187        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
00008e  4a0f              LDR      r2,|L1.204|
000090  1d12              ADDS     r2,r2,#4
000092  6812              LDR      r2,[r2,#0]
000094  4382              BICS     r2,r2,r0
000096  4b0d              LDR      r3,|L1.204|
000098  1d1b              ADDS     r3,r3,#4
00009a  601a              STR      r2,[r3,#0]
                  |L1.156|
;;;188      }
;;;189    }
00009c  4770              BX       lr
;;;190    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;198      */
;;;199    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
00009e  2804              CMP      r0,#4
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;203      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
0000a0  d108              BNE      |L1.180|
;;;204      {
;;;205        SysTick->CTRL |= SysTick_CLKSource_HCLK;
0000a2  f04f21e0          MOV      r1,#0xe000e000
0000a6  6909              LDR      r1,[r1,#0x10]
0000a8  f0410104          ORR      r1,r1,#4
0000ac  f04f22e0          MOV      r2,#0xe000e000
0000b0  6111              STR      r1,[r2,#0x10]
0000b2  e007              B        |L1.196|
                  |L1.180|
;;;206      }
;;;207      else
;;;208      {
;;;209        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
0000b4  f04f21e0          MOV      r1,#0xe000e000
0000b8  6909              LDR      r1,[r1,#0x10]
0000ba  f0210104          BIC      r1,r1,#4
0000be  f04f22e0          MOV      r2,#0xe000e000
0000c2  6111              STR      r1,[r2,#0x10]
                  |L1.196|
;;;210      }
;;;211    }
0000c4  4770              BX       lr
;;;212    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L1.200|
                          DCD      0x05fa0000
                  |L1.204|
                          DCD      0xe000ed0c
                  |L1.208|
                          DCD      0xe000e400
                  |L1.212|
                          DCD      0xe000e180
                  |L1.216|
                          DCD      0x1fffff80
